#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app         = require('../app');
var debug       = require('debug')('lets-dog:server');
const http      = require('http');

// catch 404 and forward to error handler
app.use((req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
});

app.use((err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = process.env.ENV === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
}); // Express middleware to handle errors

let server  = http.createServer(app);
// Socket.io
const io    = require('socket.io')(server);

let users = [],
    users_connected = [];

io.on('connection', (socket) => {

  var uid = null;

  for(let i = 0; i < users_connected.length; i++) {
    socket.emit("showOnlineUsers", users_connected[i]);
  }

  socket.on('onlineUser', user_uid => {

    if( users_connected.indexOf(user_uid) < 0 ) {
      console.log('connection added');
      users_connected.push(user_uid);

      console.log('Current Connected Users:');
      console.log(users_connected);
      console.log('\n');
    }

    if ( users.indexOf(user_uid) < 0 ) {
      users.push(user_uid);

      console.log('Current Users:');
      console.log(users);
      console.log('\n');      

      // notify other clients that a new user has joined
      socket.broadcast.emit('user:join', {
        name: user_uid,
        users_connteced: users_connected.length
      });

      console.log('users online: ', users_connected.length)

    }

    uid = user_uid;

  });

  socket.on('disconnect', () => {

    const leftUSer = uid;
    console.log('this user has left the socket: ', uid);

    users_connected.splice( users_connected.indexOf(uid), 1);
    users.splice( users.indexOf(uid), 1);
    
    if ( users_connected.indexOf(uid) < 0 ) {
      socket.broadcast.emit('user:left', {
        name: uid
      });
    }

    console.log('Current Connected Users:');
    console.log(users_connected);
    console.log('num connected: ', users_connected);

  });

});

server.on('error', error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
});

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});